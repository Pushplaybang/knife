


/* Vars */



// Modular Scale ratios
$golden:           1.618
$minor-second:     1.067
$major-second:     1.125
$minor-third:      1.2
$major-third:      1.25
$perfect-fourth:   1.333
$augmented-fourth: 1.414
$perfect-fifth:    1.5
$minor-sixth:      1.6
$major-sixth:      1.667
$minor-seventh:    1.778
$major-seventh:    1.875
$octave:           2
$major-tenth:      2.5
$major-eleventh:   2.667
$major-twelfth:    3
$double-octave:    4

// Settings
$body-font-size: 	14px !default
$body-line-height: 	$golden !default
$scale-factor: 		$minor-third !default
$ie8compatability: 	true !default
$outputrems: 		true !default



/* Utilities */



// Sass exponent support
@function exponent($base, $exponent)
	// reset value
	$value: $base
	// positive intergers get multiplied
	@if $exponent > 1
		@for $i from 2 through $exponent
			$value : $value * $base
	// negitive intergers get divided. A number divided by itself is 1
	@if $exponent < 1
		@for $i from 0 through -$exponent
			$value : $value / $base
	// return the last value written
	@return ($value)

// px to rem
@function calculateRem($size) 
	$remSize: $size / $body-font-size
	@return #{$remSize}rem

// resolve values to a multiple of our base
@function resolve($value: 0, $roundup: false)
	$kbase : 		ceil($body-font-size * $body-line-height)
	$newVal: $value % $kbase
	$r : 0

	@if $roundup == false
		$r: $value - $newVal
	@else if $roundup == true
		$x : $kbase - $newVal
		$r : $value + $x
	@return $r



/* Mixins */



// rem font and line height
@mixin pxType($fontSize, $lineHeight)
	font-size: $fontSize
	line-height: $lineHeight

// rem font and line height
@mixin remType($fontSize, $lineHeight)
	font-size: calculateRem($fontSize)
	line-height: calculateRem($lineHeight)

// margin top and bottom in px
@mixin pxMargin($mb: 0,$ma: 0)
	margin-top: $mb
	margin-bottom: $ma

// margin top and bottom in rem
@mixin remMargin($mb: 0,$ma: 0)
	margin-top: calculateRem($mb)
	margin-bottom: calculateRem($ma)

// output any attr as rem with IE support
@mixin krem($attr: "",$px: 0, $ie: $ie8compatability, $resolve: false, $roundup: false)
	@if $resolve == false
		@if $ie == true
			#{$attr} : $px
		#{$attr} : calculateRem($px)
	@else if $resolve == true
		$newVal : resolve($px,$roundup)
		@if $ie == true
			#{$attr} : $newVal
		#{$attr} : calculateRem($newVal)

// html mixin
@mixin khtml($reduce:0px)
	$kbase : 		(ceil($body-font-size * $body-line-height)) - $reduce
	$px : 			$body-font-size - $reduce
	@include pxType($px, $kbase)

// body mixin
@mixin kbody($reduce:0px)
	$kbase : 		(ceil($body-font-size * $body-line-height)) - $reduce
	$px : 			$body-font-size - $reduce

	@if $ie8compatability == true
		@include pxType($px, $kbase)
	@include remType($px, $kbase)

// type mixin
@mixin ktype($scale, $before: 0, $after: 0,$offset: 0, $pull: false, $push: false, $ie: $ie8compatability)
	
	// setup what we've got to work with
	$kbase : 		ceil($body-font-size * $body-line-height)
	$new-font-size: 	$body-font-size
	$new-line-height: 	$kbase
	$margin-before: 	$kbase * $before
	$margin-after: 		$kbase * $after 
	$compat: 			$ie

	// Set new vars
	@if $scale != 0
		$new-font-size: 	ceil($body-font-size * exponent($scale-factor, $scale))
		$new-line-height: 	ceil($new-font-size / $kbase) * $kbase

		// push and pull 
		@if $pull != false
			$m: ($pull / 2)
			$new-line-height: $new-line-height - ($new-line-height*$m)
		@else if $push != false
			$m: ($push / 2)
			$new-line-height: $new-line-height + ($new-line-height*$m)
	
	// offset
	@if $offset != 0
		$new-line-height: $new-line-height - $offset
	
	// Output
	@include krem("font-size", $new-font-size, $compat)
	@include krem("line-height", $new-line-height, $compat)
	@include krem("margin-top", $margin-before, $compat)
	@include krem("margin-bottom", $margin-after, $compat)
	

// prefix : add padding before
@mixin kprefix($multiple, $margin:false)
	$x : 		(ceil($body-font-size * $body-line-height)) * $multiplie
	@if $margin == false 
		@include krem("padding-top",$x)
	@else 
		@include krem("margin-top",$x)

// suffix : add padding after
@mixin ksuffix($multiple, $margin:false)
	$x : 		(ceil($body-font-size * $body-line-height)) * $multiplie
	@if $margin == false 
		@include krem("padding-bottom",$x)
	@else 
		@include krem("margin-bottom",$x)


@mixin kniferack()
	/* Typography */
	h1 
		@include ktype(5, 2, 1)
	h2 
		@include ktype(4, 1, 1)
	h3 
		@include ktype(3, 1, 1)
	h4 
		@include ktype(2, 1, 1)
	h5 
		@include ktype(1, 1, 0)
	h6  
		@include ktype(0, 1, 0)
	p, ul, ol,dl 
		@include ktype(0,0,1)
	small
		display: inline-block
		@include ktype(-1,0,0)